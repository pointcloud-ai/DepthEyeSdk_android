apply plugin: 'com.android.application'android {    compileSdkVersion 26    sourceSets {        main {            jni.srcDirs = []            jniLibs.srcDirs = ['libs']            assets.srcDirs = ['src/main/assets', 'src/main/assets/']        }    }    defaultConfig {        applicationId "ai.pointcloud.demo.depthcamera"        minSdkVersion 19        targetSdkVersion 26        versionCode 1        versionName "1.0"        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"        ndk {            moduleName "deptheye"            stl "gnustl_static"            ldLibs "log"            cFlags "-DTARGET_PLATFORM_ANDROID"            abiFilters 'armeabi-v7a', 'armeabi'        }    }    buildTypes {        release {            minifyEnabled false            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'        }    }    externalNativeBuild {        cmake {            path 'CMakeLists.txt'        }    }}dependencies {    //implementation fileTree(dir: 'libs', include: ['*.jar'])    compile fileTree(dir: 'libs', include: '*.jar')    implementation 'com.android.support:appcompat-v7:26.1.0'    implementation 'com.android.support.constraint:constraint-layout:1.0.2'    testImplementation 'junit:junit:4.12'    androidTestImplementation 'com.android.support.test:runner:1.0.1'    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'}task removeOldjar(type: Delete){    delete("libs/armeabi-v7a.jar")    delete("src/main/assets/lib/libdeptheye.so")    followSymlinks = true}task copyShareObjects(type: Copy){    from 'src/main/jniLibs/armeabi-v7a'    into 'src/main/assets/lib'}task copyTolibs(type: Copy){    from 'src/main/jniLibs/armeabi-v7a'    into 'libs/lib/armeabi-v7a/'}task makeJar(type: Zip){    from 'libs/'    //into 'libs/'    destinationDir = file('libs/')    baseName = 'armeabi-v7a'    extension = 'jar'    //archiveName = 'armeabi-v7a.zip'}task removeRedundant(type: Delete){    delete("libs/lib")    followSymlinks = true}copyShareObjects.dependsOn(removeOldjar)copyTolibs.dependsOn(copyShareObjects)makeJar.dependsOn(copyTolibs)removeRedundant.dependsOn(makeJar)afterEvaluate {    tasks.matching {        it.name.startsWith('assembleDebug') || it.name.startsWith('compileDebugSources')    }.each {        task->task.dependsOn(removeRedundant)    }/*    tasks.matching {        it.name.startsWith('makeJar')    }.each {        task->task.dependsOn(copyTolibs)    }    tasks.matching {        it.name.startsWith('copyTolibs')    }.each {        task->task.dependsOn(copyShareObjects)    }    tasks.matching {        it.name.startsWith('copyShareObjects')    }.each {        task->task.dependsOn(removeOldjar)    }    tasks.matching {        it.name.startsWith('removeOldjar')    }.each {        task->task.dependsOn(externalNativeBuildDebug)    }*/}